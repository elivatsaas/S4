S4 is a scheduling software that allows schedule makers to save hours weekly while making schedules, generating schedules based on employee and employeer needs, all while making it as easy and efficent to use as possible. The goal of S4 is to solve the problem of inefficient scheduling in workplaces with in consitent schedules affects schedule makers; the impact of which is spending hours longer than necessary creating schedules, wasting employeer money and employee time. S4 is designed for schedule makers who spend hours weekly creating schedules, it is a scheduling software that autogenerates a schedule considers including but not limited to employee availability, roles employee is eligible to work, stores the employee is eligble to work, preferred hours, seniority, and overtime considerations. To help managers, S4 will also allow shift trades, annoucements, and metrics to make the scheduling process smoother. Unlike the paper scheduling many of our interviewed clients rely on, our product will generate a schedule, while highlighting conflicts, in moments. This gives managers more time to be doing other work, or getting extra time off work. 

Autogenerate Schedules: To do this we will look at each **employee** and look at a number of factors like *hours requested*, *senority*, *trust*, *position*, and most importantly *availability*. Using all these factors we hope to build an algorithm that creates an **employee** *score* that will decide the number of hours each employee recieves. We also hope to include at least one employee with the *position* manager or a high level of *trust* present at all times. We hope our program thinks through the **schedule** making process just like a human scheduler would make it, just in a fraction of the time.

Conflict Recognition/Highlighting: After creating the **scheudle** there will be a run through to check that the **schedule** is valid and then flag any *conflicts* like no **employee** found to fill the **shift**, **employee** working 2 **shifts** at once, or there being overlap between the **employees** *unavailability* and a **shift** that they are scheduled for. This will then allow the user to go through and manually fix any issues with the **schedule** that are found the the conflic algorithm.
